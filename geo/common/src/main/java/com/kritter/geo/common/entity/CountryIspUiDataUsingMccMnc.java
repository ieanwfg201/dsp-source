package com.kritter.geo.common.entity;

import com.kritter.abstraction.cache.interfaces.IUpdatableEntity;
import lombok.Getter;

import java.sql.Timestamp;

/**
 * This class contains country and isp ui ids as
 * generated by the data from open rtb where key
 * would be mcc and mnc codes.
 * Key = mnc-mcc and value as this entity.
 */
public class CountryIspUiDataUsingMccMnc implements IUpdatableEntity<String>
{
    @Getter
    private String mnc;
    @Getter
    private String mcc;
    @Getter
    private Integer countryUiId;
    @Getter
    private Integer ispUiId;

    private boolean isMarkedForDeletion;
    private final Timestamp updateTime;
    private static final String DELIMITER = "-";

    public CountryIspUiDataUsingMccMnc(
                                       String mnc,
                                       String mcc,
                                       Integer countryUiId,
                                       Integer ispUiId,
                                       Timestamp updateTime
                                      )
    {
        this.mnc = mnc;
        this.mcc = mcc;
        this.countryUiId = countryUiId;
        this.ispUiId = ispUiId;
        this.isMarkedForDeletion = false;
        this.updateTime = updateTime;
    }

    @Override
    public int hashCode()
    {
        int hash = 7;
        hash = 23 * hash
                + (this.mnc.hashCode())
                + (this.mcc.hashCode())
                + (this.countryUiId.hashCode())
                + (this.ispUiId.hashCode());

        return hash;
    }

    @Override
    public boolean equals(Object obj)
    {
        if (null == obj || getClass() != obj.getClass())
            return false;

        CountryIspUiDataUsingMccMnc externalObject = (CountryIspUiDataUsingMccMnc) obj;

        if(
           this.mnc.equals(externalObject.mnc) &&
           this.mcc.equals(externalObject.mcc)
          )
            return true;

        return false;
    }

    @Override
    public Long getModificationTime()
    {
        return updateTime.getTime();
    }

    @Override
    public boolean isMarkedForDeletion()
    {
        return isMarkedForDeletion;
    }

    @Override
    public String getId()
    {
        StringBuffer sb = new StringBuffer();
        sb.append(mcc);
        sb.append(DELIMITER);
        sb.append(mnc);
        return sb.toString();
    }

    public static String prepareKeyForEntityLookup(String mcc,String mnc)
    {
        StringBuffer sb = new StringBuffer();
        sb.append(mcc);
        sb.append(DELIMITER);
        sb.append(mnc);
        return sb.toString();
    }
}
