# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.Application.index() 
GET     /algo-center                controllers.Application.algoCenter()
GET     /dashboard                  controllers.Application.dashboard()

#Admin Pages
GET 	/accounts/add/:accountType           		   controllers.AccountsController.add(accountType:String) 
GET 	/accounts/:account_guid/edit   				   controllers.AccountsController.edit(  account_guid: String )
POST 	/accounts		                			   controllers.AccountsController.save()
GET 	/accounts/:accountType            		       controllers.AccountsController.accountListView(accountType:String, active: Option[String])
POST 	/accounts/list            					   controllers.AccountsController.accountList()
GET 	/accounts/updateStatus/:account_guid/:action   controllers.AccountsController.updateAccountStatus( account_guid:String, action: String )
POST 	/accounts/updateStatus  					   controllers.AccountsController.saveAccountStatus()


#Entity List API
POST 	/entitylist            						controllers.EntityListController.entityList()


#TestPages
GET    /testpages/viewtestsite                                  controllers.TestPagesController.viewtestsite()
GET    /testpages/viewtestclick                                 controllers.TestPagesController.viewtestclick()
GET    /testpages/viewtestexchange                              controllers.TestPagesController.viewtestexchange()
POST   /testpages/getadordebug                                  controllers.TestPagesController.getadordebug()
POST   /testpages/exchangeresponsedebug                         controllers.TestPagesController.exchangeresponsedebug()
POST   /testpages/performclick                                  controllers.TestPagesController.performclick()

#CacheInfo
GET    /cacheinfo/default                                  		controllers.CacheInfoController.viewcacheinfo()
POST   /cacheinfo/getcachinfo									controllers.CacheInfoController.exchangeresponsedebug()

# Log pages
GET /logpages/log                                                controllers.LogPagesController.logs()
POST /logpages/data                                              controllers.LogPagesController.data()
POST /logpages/data/CSV                                          controllers.LogPagesController.dataCSV()

#Advertiser Pages
GET 	/advertiser/:account_guid   									controllers.advertiser.AdvertiserController.home(account_guid: String )
GET     /advertiser/:account_guid/campaignView/:status               	controllers.advertiser.AdvertiserController.campaignListView(account_guid: String,  status:String )
GET     /advertiser/:account_guid/info               					controllers.advertiser.AdvertiserController.info(account_guid: String )
GET 	/advertiser/:account_guid/budget   								controllers.advertiser.AdvertiserController.budget(account_guid: String )
GET     /advertiser/:accountGuid/campaigns      						controllers.advertiser.AdvertiserController.campaigns(accountGuid:String, status:Option[String],pageNo: Option[Integer], pageSize: Option[Integer])
GET     /advertiser/:accountGuid/campaigns/workflow/:action 			controllers.advertiser.AdvertiserController.campaignWorkflowForm(accountGuid:String, action:String, ids: Option[String])
POST    /advertiser/campaigns/update 			   						controllers.advertiser.AdvertiserController.updateCampaigns()
 
#Campaign Pages
GET     /advertiser/:account_guid/campaigns/add             controllers.advertiser.CampaignController.add(account_guid:String)
GET     /advertiser/campaigns/:campaign_id/edit             controllers.advertiser.CampaignController.edit(  campaign_id:Int)
GET     /advertiser/campaigns/:campaign_id/addbudget        controllers.advertiser.CampaignController.addbudget(  campaign_id:Int)
GET     /advertiser/campaigns/:campaign_id/view             controllers.advertiser.CampaignController.view(  campaign_id:Int)


POST    /advertiser/campaigns/save                 					controllers.advertiser.CampaignController.save()
POST    /advertiser/campaigns/saveadbudget                          controllers.advertiser.CampaignController.saveadbudget()
#GET     /advertiser/:accountGuid/campaigns/workflow/form			controllers.advertiser.CampaignController.workflowForm(accountGuid:String, id:Option[Integer] ,action:Option[String])
GET     /advertiser/campaigns/:campid/ads     						controllers.advertiser.CampaignController.ads(campid:Int, pageNo: Option[Integer], pageSize: Option[Integer])

#Ad Pages Link
GET     /advertiser/ads/options/defaultOptions    				controllers.advertiser.AdController.defaultOptions() 
GET     /advertiser/campaigns/:campid/ads/create  				controllers.advertiser.AdController.createAd(campid:Int, formId:Option[String], tpId:Option[String], creativeId:Option[String])
POST    /advertiser/campaigns/ad/save                  			controllers.advertiser.AdController.saveAd()
POST    /advertiser/campaigns/ad/saveadclone                    controllers.advertiser.AdController.saveAdClone()
GET     /advertiser/campaigns/ads/:id/edit             			controllers.advertiser.AdController.edit(id:Int, destination:Option[String])
GET     /advertiser/campaigns/ads/:id/clone             		controllers.advertiser.AdController.cloneAd(id:Int)
GET     /advertiser/campaigns/ads/:id/view             			controllers.advertiser.AdController.view(id:Int, destination:Option[String])
GET     /advertiser/campaigns/ads/:id/updateStatus/:action      controllers.advertiser.AdController.updateStatusForm(id:Int, action:String)
POST    /advertiser/campaigns/ads/updateStatus             		controllers.advertiser.AdController.updateStatus()
GET     /advertiser/campaigns/ads/updateMultipleAds/:action     controllers.advertiser.AdController.updateMultipleAds(action:String, ids: Option[String])

#Creative Pages
GET     /advertiser/:account_guid/creatives                 	 controllers.advertiser.CreativeController.listView(account_guid: String)
GET     /advertiser/:account_guid/creatives/data                 controllers.advertiser.CreativeController.list(account_guid: String, pageNo: Option[Integer], pageSize: Option[Integer])
GET     /advertiser/:account_guid/creatives/add                  controllers.advertiser.CreativeController.addCreative(account_guid: String, destination:Option[String])

GET     /advertiser/creatives/:creative_id/edit                  controllers.advertiser.CreativeController.editCreative(creative_id: Int)
GET     /advertiser/creatives/:creative_id/view                  controllers.advertiser.CreativeController.viewCreative(creative_id: Int)
GET     /advertiser/:account_guid/creatives/banners/add          controllers.advertiser.CreativeController.addBanner(account_guid:String) 
GET     /advertiser/creatives/banners/:banner_guid/edit          controllers.advertiser.CreativeController.editBanner(banner_guid: String) 

POST    /advertiser/creatives/save                 	             controllers.advertiser.CreativeController.saveCreative()
POST    /advertiser/creatives/banner/upload/:accountGuid         controllers.advertiser.CreativeController.uploadBanner(accountGuid:String)
POST    /advertiser/creatives/icon/upload/:accountGuid           controllers.advertiser.CreativeController.uploadIcon(accountGuid:String)
POST    /advertiser/creatives/screenshot/upload/:accountGuid     controllers.advertiser.CreativeController.uploadScreenshot(accountGuid:String)
POST    /advertiser/creatives/directvideo/upload/:accountGuid    controllers.advertiser.CreativeController.uploadDirectvideo(accountGuid:String)
POST    /advertiser/creatives/banner/save                        controllers.advertiser.CreativeController.saveBanner()
POST    /advertiser/creatives/icon/save                          controllers.advertiser.CreativeController.saveIcon()
POST    /advertiser/creatives/screenshot/save                    controllers.advertiser.CreativeController.saveScreenshot()
POST    /advertiser/creatives/directvideo/save                   controllers.advertiser.CreativeController.saveDirectvideo()
GET     /advertiser/creatives/:creative_id/banners	             controllers.advertiser.CreativeController.bannerList(creative_id:Int)
GET     /advertiser/creatives/:creative_id/nativeicons           controllers.advertiser.CreativeController.nativeIconList(creative_id:Int)
GET     /advertiser/creatives/:creative_id/nativescreenshots     controllers.advertiser.CreativeController.nativeScreenshotList(creative_id:Int)
GET     /advertiser/creatives/:creative_id/directvideos          controllers.advertiser.CreativeController.directvideoList(creative_id:Int)
GET 	/advertiser/creatives/metadata/creativeattrs/:typeid	 controllers.advertiser.CreativeController.creativeAtrributes(typeid:Int)
GET     /advertiser/creatives/metadata/creativemacros            controllers.advertiser.CreativeController.creativeMacros()
GET     /advertiser/creatives/metadata/videotracking             controllers.advertiser.CreativeController.videoTracking() 
GET     /advertiser/campaigns/creative/:id/updateStatus/:action  controllers.advertiser.CreativeController.updateStatusForm(id:Int, action:String)
POST    /advertiser/campaigns/creative/updateStatus              controllers.advertiser.CreativeController.updateStatus()
GET     /advertiser/campaigns/creative/updateMultipleCreative/:action controllers.advertiser.CreativeController.updateMultipleCreative(action:String, ids: Option[String])


#Targeting Profile Pages 

GET     /advertiser/:account_guid/targeting-profiles                           controllers.advertiser.TargetingProfileController.list(account_guid:String)
GET     /advertiser/:account_guid/targeting-profiles/data                      controllers.advertiser.TargetingProfileController.tpList(account_guid:String, pageNo: Option[Integer], pageSize: Option[Integer])
GET     /advertiser/:account_guid/targeting-profiles/add                       controllers.advertiser.TargetingProfileController.add(account_guid:String, destination: Option[String]) 
GET     /advertiser/:account_guid/targeting-profiles/:tp_guid/view             controllers.advertiser.TargetingProfileController.view(tp_guid:String, account_guid:String)
GET     /advertiser/:account_guid/targeting-profiles/:tp_guid/edit             controllers.advertiser.TargetingProfileController.edit(tp_guid:String, account_guid:String)
POST    /advertiser/targeting-profiles/save                 	               controllers.advertiser.TargetingProfileController.save() 
POST    /advertiser/targeting-profiles/upload-geotarget-data                   controllers.advertiser.TargetingProfileController.uploadGeoTargetingData() 

GET     /advertiser/targeting-profiles/options/defaultOptions    		       controllers.advertiser.TargetingProfileController.defaultOptions(osList:Option[String], brandList:Option[String] )


#Insertion Order
GET     /advertiser/:account_guid/insertion-orders/:status      controllers.advertiser.IOController.iosByAccount(account_guid:String, status:String, pageNo: Option[Integer], pageSize: Option[Integer])
GET     /insertion-order/create             					controllers.advertiser.IOController.create()
GET     /insertion-order/list/:status                 			controllers.advertiser.IOController.list(status:String)
POST    /insertion-order/update                					controllers.advertiser.IOController.updateIOStatus()
POST    /insertion-order/save                 					controllers.advertiser.IOController.save()
GET     /insertion-order/workflow/editFrom/:guid/:ioId/:action	controllers.advertiser.IOController.editForm(ioId:String, guid:String,action:String)


#Publisher 
GET     /publisher/:account_guid/info            controllers.publisher.PublisherController.info(account_guid: String )
GET 	/publisher/:account_guid   				 controllers.publisher.PublisherController.home(account_guid: String )
GET     /publisher/:account_guid/sites           controllers.publisher.PublisherController.siteList(account_guid:String, destination:Option[String] , status:Option[String] ,pageNo: Option[Integer], pageSize: Option[Integer])

#Site

GET    /publisher/:account_guid/sites/add           controllers.publisher.SiteController.add(account_guid:String)
GET    /publisher/sites/:site_id/edit				controllers.publisher.SiteController.edit(  site_id: Int, destination:Option[String] )
GET    /publisher/sites/:site_id/view				controllers.publisher.SiteController.view(  site_id: Int, destination:Option[String] ) 
GET    /site/metadata/defaultoptions             	controllers.publisher.SiteController.defaultOptions()
GET    /site/list/:status                 			controllers.publisher.SiteController.list(status:String)
POST   /site/save                 					controllers.publisher.SiteController.save()
GET    /site/workflow/form/:id/:action				controllers.publisher.SiteController.workflowForm(id:Int,action:String)
POST   /site/update                					controllers.publisher.SiteController.updateSite()
GET     /site/updateMultipleSite/:action            controllers.publisher.SiteController.updateMultipleSite(action:String, ids: Option[String])
GET    /extsite/workflow/form/:id/:action           controllers.publisher.ExtsiteController.workflowForm(id:Int,action:String)
GET    /extsite/workflow/editform/:id/:action       controllers.publisher.ExtsiteController.editworkflowForm(id:Int,action:String)
POST   /extsite/update                              controllers.publisher.ExtsiteController.updateextSite()
POST   /extsite/updateextsitename                   controllers.publisher.ExtsiteController.updateextsitename()
GET    /extsite/updateMultipleextSite/:action       controllers.publisher.ExtsiteController.updateMultipleextSite(action:String, ids: Option[String])


#Operations
GET    /operations/site-approval-queue             controllers.OperationsController.siteApprovalQueue()
GET    /operations/ad-approval-queue			   controllers.OperationsController.adApprovalQueue()
GET    /operations/creative-approval-queue         controllers.OperationsController.creativeApprovalQueue()
GET    /operations/io-approval-queue			   controllers.OperationsController.ioApprovalQueue() 


GET    /operations/site-approval-queue/Rejected          controllers.OperationsController.rejectedSites()
GET    /operations/ad-approval-queue/Rejected			 controllers.OperationsController.rejectedAds()
GET    /operations/io-approval-queue/REJECTED			 controllers.OperationsController.rejectedIos()
GET    /operations/creative-approval-queue/Rejected      controllers.OperationsController.rejectedCreative()

GET    /operations/site-approval-queue/Approved        controllers.OperationsController.approvedSites()
GET    /operations/site-approval-queue/Active          controllers.OperationsController.activeSites()
GET    /operations/site-approval-queue/Paused          controllers.OperationsController.pausedSites()

GET    /operations/site-approval-queue/data            controllers.OperationsController.siteApprovalQueueData(status: Option[String], pageNo: Option[Integer], pageSize: Option[Integer])
GET    /operations/ad-approval-queue/data			   controllers.OperationsController.adApprovalQueueData(status: Option[String], pageNo: Option[Integer], pageSize: Option[Integer])
GET    /operations/io-approval-queue/data			   controllers.OperationsController.ioApprovalQueueData(status: Option[String], pageNo: Option[Integer], pageSize: Option[Integer])

GET    /operations/extsite-approval-queue/:status      controllers.OperationsController.extsiteApprovalQueue(status:String, exchange: Option[String], osId: Option[String])
GET    /operations/extsite-approval-queue/data         controllers.OperationsController.extsiteApprovalQueueData(status: Option[String], pageNo: Option[Integer], pageSize: Option[Integer])


#Reporting
GET    /reporting/dashboard                                		 controllers.reporting.ReportingController.dashboard()
POST   /reporting/dashboard/data                                 controllers.reporting.ReportingController.data()
GET    /reporting/supply                                         controllers.reporting.ReportingController.supplyReport()
GET    /reporting/supply/options                                 controllers.reporting.ReportingController.supplyReportOptions()
GET    /reporting/demand                                         controllers.reporting.ReportingController.demandReport()
GET    /reporting/demand/options                                 controllers.reporting.ReportingController.demandReportOptions() 
GET    /reporting/limited                                        controllers.reporting.ReportingController.limitedReport()
GET    /reporting/limites/options                                controllers.reporting.ReportingController.limitedReportOptions() 
GET    /reporting/channel                                        controllers.reporting.ReportingController.channelReport()
GET    /reporting/adposition                                     controllers.reporting.ReportingController.adpositionReport()
GET    /reporting/network                                        controllers.reporting.ReportingController.networkReport()
GET    /reporting/network/options                                controllers.reporting.ReportingController.networkReportOptions() 
POST   /reporting/limiteddata                                    controllers.reporting.ReportingController.limitedreportData()
POST   /reporting/limiteddata/CSV                                controllers.reporting.ReportingController.limitedreportDataCSV()
POST   /reporting/channeldata                                    controllers.reporting.ReportingController.channelreportData()
POST   /reporting/channeldata/CSV                                controllers.reporting.ReportingController.channelreportDataCSV()
POST   /reporting/adpositiondata                                 controllers.reporting.ReportingController.adpositionreportData()
POST   /reporting/adpositiondata/CSV                             controllers.reporting.ReportingController.adpositionreportDataCSV()
POST   /reporting/data                                   		 controllers.reporting.ReportingController.reportData()
POST   /reporting/data/CSV                                       controllers.reporting.ReportingController.reportDataCSV()
GET    /reporting/hierarchical/global                            controllers.reporting.ReportingController.hierarchicalGlobal()
POST   /reporting/hierarchical/data/global                       controllers.reporting.ReportingController.hierarchyGlobalData()
POST   /reporting/hierarchical/data/global/CSV                   controllers.reporting.ReportingController.hierarchyGlobalDataCSV()
GET    /extsiterepoting/default                                  controllers.extsitereport.ExtSiteReportController.extsiteReport()
POST   /extsitereport/data                                       controllers.extsitereport.ExtSiteReportController.reportData()
POST   /extsitereport/data/CSV                                   controllers.extsitereport.ExtSiteReportController.reportDataCSV()
GET    /iddefinition/default                                     controllers.iddefinition.IddefinitionController.iddefinition()
POST   /iddefinition/getiddefinition                             controllers.iddefinition.IddefinitionController.getiddefinition()
GET    /fraudreport/default                                      controllers.fraudreport.FraudReportController.fraudReport()
POST   /fraudreport/data                                         controllers.fraudreport.FraudReportController.reportData()
POST   /fraudreport/data/CSV                                     controllers.fraudreport.FraudReportController.reportDataCSV()
GET    /trackingEvent/default                                    controllers.tracking_event.TrackingEventController.trackingEventReport()
POST   /trackingEvent/data                                       controllers.tracking_event.TrackingEventController.reportData()
POST   /trackingEvent/data/CSV                                   controllers.tracking_event.TrackingEventController.reportDataCSV()
GET    /userreport/default                                       controllers.userreport.UserReportController.userReport()
POST   /userreport/data                                          controllers.userreport.UserReportController.reportData()
POST   /userreport/data/CSV                                      controllers.userreport.UserReportController.reportDataCSV()
GET    /algo/default                                             controllers.algo.AlgoController.getAlpha()
POST   /algo/data                                                controllers.algo.AlgoController.reportData()
GET    /reqLogging/default                                       controllers.req_logging.ReqLoggingController.getReqLogging()
POST   /reqLogging/data                                          controllers.req_logging.ReqLoggingController.reportData()
GET    /adstats/default                                       	 controllers.adstats.AdStatsController.adstatsReport()
POST   /adstats/data                                         	 controllers.adstats.AdStatsController.reportData()
POST   /adstats/data/CSV                                         controllers.adstats.AdStatsController.reportDataCSV()



#Saved Report Pages
GET   /reporting/saved-reports                                   controllers.reporting.ReportingController.savedReportsPage()
GET   /reporting/saved-reports/data                              controllers.reporting.ReportingController.savedReportsData()
GET   /reporting/save-report-form/:type/:id                      controllers.reporting.ReportingController.saveReportForm(type:String, id:Int)
POST  /reporting/save-report                                     controllers.reporting.ReportingController.saveReport()
GET  /reporting/saved-report/:reportId                        	 controllers.reporting.ReportingController.viewSavedReport(reportId:Int)
GET  /reporting/saved-report/:reportId/delete                    controllers.reporting.ReportingController.deleteSavedReport(reportId:Int)

#Publisher Reports

GET /reports/hierarchical/:type									controllers.reporting.HierarchicalReportController.reportPage(type: String, filter:Option[String])
POST /reports/hierarchical/data									controllers.reporting.HierarchicalReportController.reportData()
POST /reports/hierarchical/:type								controllers.reporting.HierarchicalReportController.filteredReportPage(type: String, filter:Option[String])


#External Reports
POST   /reportingapi/advertisers                                          controllers.reporting.ReportingController.externalAdvertiserReport()
POST   /reportingapi/publishers                                           controllers.reporting.ReportingController.externalPublisherReport()
#External Reports
POST   /reportingapi/monitoring/advertisers                                       controllers.reporting.ReportingController.monitoringAdvertiserReport()
POST   /reportingapi/monitoring/publishers                                        controllers.reporting.ReportingController.monitoringPublisherReport()
POST   /reportingapi/monitoring/overall                                           controllers.reporting.ReportingController.monitoringOverall()

#API
POST   /api/v1/reporting                                           controllers.api.v1.KAPI.reporting()
POST   /api/v1/reportingwithId                                     controllers.api.v1.KAPI.reportingwithId()
#Allowed accountType - pub, adv#
#Allowed actionType - create, verify, get, getbyuserid, edit#
POST   /api/v1/account/:accountType/:actionType                    controllers.api.v1.KAPI.account(accountType:String,actionType:String)
#Allowed actionType - create, edit, get, list#
POST   /api/v1/site/:actionType                                    controllers.api.v1.KAPI.site(actionType:String)
#Allowed actionType - create, edit, get, list, activate, pause, expiredlist, nonexpiredlist#
POST   /api/v1/campaign/:actionType                                controllers.api.v1.KAPI.campaign(actionType:String)
#Allowed actionType - create, edit, get#
POST   /api/v1/campaignbudget/:actionType                          controllers.api.v1.KAPI.campaignbudget(actionType:String)
#Allowed actionType - create, edit, get, list, pause, activate#
POST   /api/v1/ad/:actionType                                      controllers.api.v1.KAPI.ad(actionType:String)
#Allowed actionType - create, edit, get, list#
POST   /api/v1/targetingprofile/:actionType                        controllers.api.v1.KAPI.targetingprofile(actionType:String)
#Allowed actionType - create, edit, get, list#
POST   /api/v1/creativecontainer/:actionType                       controllers.api.v1.KAPI.creativecontainer(actionType:String)
#Allowed actionType - create, edit, get, list#
POST   /api/v1/creativebanner/:actionType                          controllers.api.v1.KAPI.creativebanner(actionType:String)
POST   /api/v1/imageupload/:accountGuid                            controllers.api.v1.KAPI.imageupload(accountGuid:String)
#Allowed metatype - 
#   countries, browsers, tier1categories, tier2categories, hours, inventory_source, payment_type
#   site_platform, appstores, hygiene, creativeattr, creativetypes, slotoptions, marketplace, trackingpartner
#   connection_type, geo_targeting_type, os, supply_source, supply_source_type 
GET    /api/v1/meta/firstlevel/:metatype                           controllers.api.v1.KAPI.metafirstlevel(metatype:String)
GET    /api/v1/meta/secondlevel/:metatype/:ids                     controllers.api.v1.KAPI.metasecondlevel(metatype:String, ids:String)
POST   /api/v1/io/:actionType                                      controllers.api.v1.KAPI.io(actionType:String)
POST   /api/v1/account_budget/:actionType                          controllers.api.v1.KAPI.account_budget(actionType:String)
POST   /api/v1/ipfileupload/:accountGuid                           controllers.api.v1.KAPI.ipfileupload(accountGuid:String)
#Allowed action type adv, pub
GET   /api/v1/dashboard/:actionType/:accountGuid                  controllers.api.v1.KAPI.dashboard(actionType:String,accountGuid:String)
#Allowed actionType - create, update, getbyids, getbyaccountguids, deletesavedquery
POST   /api/v1/savedquery/:actionType                             controllers.api.v1.KAPI.savedquery(actionType:String)
POST   /api/v1/meta/secondlevelpost/:metatype                     controllers.api.v1.KAPI.metasecondlevelpost(metatype:String)


# ISP MAPPINGS

GET    /ispMapping/isp-mapping-queue                         controllers.isp_mapping.IspMappingController.ispMappingQueue(country: Option[String])
GET    /ispMapping/:countryName/:ispName/workflow/:action    controllers.isp_mapping.IspMappingController.ispMappingWorkflowForm(countryName:String, ispName:String, action:String)
POST   /ispMapping/insertmap                                 controllers.isp_mapping.IspMappingController.insertMappings()
GET    /ispMapping/delete-isp-mapping/Active                 controllers.isp_mapping.IspMappingController.deleteMapping(country: Option[String])
GET    /ispMapping/deleteMapping/:id/delete                  controllers.isp_mapping.IspMappingController.deleteIspMapping( id:Int)
GET    /ispMapping/rejected-isp-mapping/Rejected             controllers.isp_mapping.IspMappingController.rejectedMapping(country: Option[String])


# SSP 
GET    /ssp/global         controllers.ssp.SSPController.globalwaterfall()
POST   /ssp/global/data    controllers.ssp.SSPController.global_data()
POST    /ssp/global/update  controllers.ssp.SSPController.update_insert()


#Metadata Services

GET     /metadata/options/advertisers                           	controllers.MetadataController.advertisers()
GET     /metadata/options/advids                                    controllers.MetadataController.advids()
GET     /metadata/options/advertiserforfiltering                    controllers.MetadataController.advertiserforfiltering()
GET     /metadata/options/directadvertiserforfiltering              controllers.MetadataController.directadvertiserforfiltering()
GET     /metadata/options/publishers                           		controllers.MetadataController.publishers() 	
GET     /metadata/options/directpublishers                          controllers.MetadataController.directpublishers()
GET     /metadata/options/exchanges                                 controllers.MetadataController.exchanges()     
GET     /metadata/options/guidexchanges                             controllers.MetadataController.guidExchanges()     
GET     /metadata/options/sites/:pubList                           	controllers.MetadataController.sitesByPublishers(pubList:String)
GET     /metadata/options/targeting_sites/:pubList                  controllers.MetadataController.targeting_sitesByPublishers(pubList:String)
GET     /metadata/options/targeting_direct_sites/:pubList            controllers.MetadataController.targeting_directsitesByPublishers(pubList:String)
GET     /metadata/options/ext_site/:pubList                         controllers.MetadataController.ext_siteByPublishers(pubList:String)
GET     /metadata/options/targeting_ext_site/:pubList               controllers.MetadataController.targeting_ext_siteByPublishers(pubList:String)
GET     /metadata/options/supplysourcetype                          controllers.MetadataController.supply_source_type()
GET     /metadata/options/campaigns/:advtList                       controllers.MetadataController.campaignsByAdvertiser(advtList:String)
GET     /metadata/options/campaignsbyadvid/:advtList                controllers.MetadataController.campaignsByAdvid(advtList:String)
GET     /metadata/options/campaignforfiltering/:advtList            controllers.MetadataController.campaignforfilteringByAdvertiser(advtList:String)
GET     /metadata/options/ads/:campaignList                         controllers.MetadataController.adsByCampaign(campaignList:String)  
GET     /metadata/options/carriers/:countryList       				controllers.MetadataController.carriers(countryList:String)
GET     /metadata/options/brands/:oslist       						controllers.MetadataController.brands(oslist:String)
GET     /metadata/options/devices/:brandList		   				controllers.MetadataController.devices(brandList:String) 
GET     /metadata/options/browsers       							controllers.MetadataController.browsers()
GET     /metadata/options/nofillReason                              controllers.MetadataController.nofillReason()
GET     /metadata/options/postimp_event                             controllers.MetadataController.postImpEvent()
GET     /metadata/options/operating-systems   						controllers.MetadataController.operatingSystems() 
GET     /metadata/options/countries   								controllers.MetadataController.countries() 
GET     /metadata/options/connection_type                           controllers.MetadataController.connection_type() 
GET     /metadata/options/tier1categories   						controllers.MetadataController.tier_1_categories()
GET     /metadata/options/tier2categories                           controllers.MetadataController.tier_2_categories()
GET     /metadata/options/device_type                               controllers.MetadataController.device_type()
GET     /metadata/options/state/:countryList       				    controllers.MetadataController.state(countryList:String)
GET     /metadata/options/city/:stateList       				    controllers.MetadataController.city(stateList:String)
GET     /metadata/options/marketplace       				        controllers.MetadataController.marketplace()


GET		/metadata/options/hygienelist   						controllers.MetadataController.hygienelist()
GET     /metadata/options/creativeattr                          controllers.MetadataController.creativeAttributes()
GET     /metadata/options/slot_options                          controllers.MetadataController.slotOptions()
GET     /metadata/options/icon_slot_options                     controllers.MetadataController.iconSlotOptions()
GET     /metadata/options/screenshot_slot_options               controllers.MetadataController.screenshotSlotOptions()

GET     /metadata/options/advertiserJsonArrayOptions                controllers.MetadataController.advertiserJsonArrayOptions()
GET     /metadata/options/hours   									controllers.MetadataController.hourList()
GET     /metadata/options/retargeting_segment_by_adv/:adv           controllers.MetadataController.retargeting_segment_by_adv(adv:String)

GET     /metadata/options/tier1mmacategory                          controllers.MetadataController.tier1mmacategory()     
GET     /metadata/options/tier2mmacategory/:tier1List               controllers.MetadataController.tier2MMAcategoryBytier1(tier1List:String)
GET     /metadata/options/tier1mmaindustry                          controllers.MetadataController.tier1mmaindustry()     
GET     /metadata/options/tier2mmaindustry/:tier1List               controllers.MetadataController.tier2MMAindustryBytier1(tier1List:String)
GET     /metadata/options/adposition_list                           controllers.MetadataController.adposition_list()     
GET     /metadata/options/tier1channel                              controllers.MetadataController.tier1channel()     
GET     /metadata/options/tier2channel/:tier1List                   controllers.MetadataController.tier2channelBytier1(tier1List:String)
GET     /metadata/options/channelbypubids/:pubids                   controllers.MetadataController.channelbypubids(pubids:String)     
GET     /metadata/options/adpositionbypubids/:pubids                controllers.MetadataController.adpositionbypubids(pubids:String)     

GET     /metadata/options/videomimes                          		controllers.MetadataController.videomimes()     
GET     /metadata/options/videoprotocols                          	controllers.MetadataController.videoprotocols()     
GET     /metadata/options/videoplaybackmethod                       controllers.MetadataController.videoplaybackmethod()     
GET     /metadata/options/videodelivery                          	controllers.MetadataController.videodelivery()     
GET     /metadata/options/videoapi                          		controllers.MetadataController.videoapi()     
GET     /metadata/options/tpdspidlist/:adv_guid                     controllers.MetadataController.third_party_demand_channel_dspid_list(adv_guid:String)
GET     /metadata/options/tpadvidlist/:adv_guid                     controllers.MetadataController.third_party_demand_channel_advid_list(adv_guid:String)

# Login page
GET     /login                      securesocial.controllers.LoginPage.login
GET     /logout                     securesocial.controllers.LoginPage.logout

# User Registration and password handling 
GET     /signup                     securesocial.controllers.Registration.startSignUp
POST    /signup                     securesocial.controllers.Registration.handleStartSignUp
GET     /signup/:token              securesocial.controllers.Registration.signUp(token)
POST    /signup/:token              securesocial.controllers.Registration.handleSignUp(token)
GET     /reset                      securesocial.controllers.Registration.startResetPassword
POST    /reset                      securesocial.controllers.Registration.handleStartResetPassword
GET     /reset/:token               securesocial.controllers.Registration.resetPassword(token)
POST    /reset/:token               securesocial.controllers.Registration.handleResetPassword(token)
GET     /password                   securesocial.controllers.PasswordChange.page
POST    /password                   securesocial.controllers.PasswordChange.handlePasswordChange

# Providers entry points
GET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)
GET     /not-authorized             securesocial.controllers.ProviderController.notAuthorized


# Map static resources from the /public folder to the /assets URL path
GET     /download              		controllers.StaticFileController.download(file:Option[String])
GET     /images/*file               controllers.StaticFileController.serveImage(file)
GET     /template/load/:template	controllers.StaticFileController.loadTemplate(template)
GET     /assets/*file               controllers.Assets.at(path="/public", file)
GET     /getapplicationlog          controllers.StaticFileController.getapplicationlog()

# Retargeting Segment
GET    /advertiser/:account_guid/retargetingsegment/create     controllers.retargeting_segment.RetargetingSegmentController.create(account_guid:String)
POST   /advertiser/retargetingsegment/save                     controllers.retargeting_segment.RetargetingSegmentController.save()
GET    /advertiser/:account_guid/retargetingsegment/list       controllers.retargeting_segment.RetargetingSegmentController.list(account_guid:String)

#PMP
GET    /pmp/default                                            controllers.deal.DealController.getDealForm()
POST   /pmp/save                                               controllers.deal.DealController.save()
GET    /pmp/:deal_guid/info                                    controllers.deal.DealController.info(deal_guid: String)
GET    /pmp/deals                                              controllers.deal.DealController.PMPListView()
GET    /pmp/add                                                controllers.deal.DealController.add()
GET    /pmp/:deal_guid/add                                     controllers.deal.DealController.edit(deal_guid: String)
