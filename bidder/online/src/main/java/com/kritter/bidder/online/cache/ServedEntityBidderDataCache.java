package com.kritter.bidder.online.cache;

import com.kritter.abstraction.cache.abstractions.AbstractFileStatsReloadableQueryableCache;
import com.kritter.abstraction.cache.interfaces.ISecondaryIndexWrapper;
import com.kritter.abstraction.cache.utils.exceptions.InitializationException;
import com.kritter.abstraction.cache.utils.exceptions.ProcessingException;
import com.kritter.abstraction.cache.utils.exceptions.RefreshException;
import com.kritter.bidder.online.entity.ServedEntityBidderData;
import lombok.Getter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Properties;

/**
 * This class loads entity data generated by offline bidder for usage in online bidding algorithm
 */
public class ServedEntityBidderDataCache extends AbstractFileStatsReloadableQueryableCache<Integer,
                                                                                           ServedEntityBidderData>
{

    private String cacheName;
    private static Logger logger = LoggerFactory.getLogger("cache.logger");
    public ServedEntityBidderDataCache(
                                       String cacheName,
                                       List<Class> secIndexKeyClassList,
                                       Properties props
                                      ) throws InitializationException
    {
        super(secIndexKeyClassList,logger, props);
        this.cacheName = cacheName;
    }

    /**
     *
     * @param line
     * @return
     * @throws RefreshException
     *
     * This function takes bidder generated data line as entity_numeric_id => double_value_of_alpha.
     * and populates the entity to store.
     */
    @Override
    protected ServedEntityBidderData buildEntity(String line) throws RefreshException
    {
        return ServedEntityBidderData.populateEntityUsingData(line,false,System.currentTimeMillis());
    }

    //not to worry about the file handle, the parent class takes care of closing it in refreshEntities() function.
    @Override
    protected ServedEntityBidderData release() throws ProcessingException
    {
        return null;
    }


    @Override
    public ISecondaryIndexWrapper getSecondaryIndexKey(Class className, ServedEntityBidderData entity)
    {
        return null;
    }

    @Override
    public String getName()
    {
        return this.cacheName;
    }
}
