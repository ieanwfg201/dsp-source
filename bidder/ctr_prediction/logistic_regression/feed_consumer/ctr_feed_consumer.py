import math
import sys

"""
Loads up the feed file and consumes the feed. Given a bunch of dimensions, would return the CTR predicted.
This is the exact functionality required on the online side. This is also required by the offline bidder job.
Hence, this exists.
"""
class LogitCTRPredictor:
    """
    Class to use for CTR prediction. Loads up the feed.
    """
    def __init__(self):
        self.feedMap = None

    def loadCTRFeedFromString(self, feedStr, colNames, delimiter, linesToIgnoreFromStart):
        """
        Takes the feed created by logistic regression solver as a string 'feedStr'. Also takes the names of individual
        columns provided to the feed creator. Breaks down the feed into a map of maps and returns the same.
        For eg., if the feed looks like
        country_91#0.3
        country_23#0.96
        os_1#0.17
        In the first line column name is country, column value is 91, delimiter is # and the coefficient  value is 0.3
        the returned map would be like (in JSON)
        {"country":{91:0.3, 23:0.96}, "os":{1:0.17}}

        :param feedStr: the feed generated by logistic regression solver
        :type feedStr: str
        :param colNames: names of the dimensions. is the same as dimNames elsewhere
        :type colNames: list of str
        :param delimiter: delimiter between key and value in the feed
        :type delimiter: str
        :param linesToIgnoreFromStart: If the starting few lines contain metadata, ignore them
        :type linesToIgnoreFromStart: int
        """
        retMap = {}
        for colName in colNames:
            retMap[colName] = {}

        # Break the feedStr string on newline.
        feedStrLines = feedStr.split('\n')
        linesDone = 0
        for feedStrLine in feedStrLines:
            if linesDone < linesToIgnoreFromStart:
                linesDone += 1
                continue
            linesDone += 1
            # For each line, now break it on the delimiter
            tokens = feedStrLine.split(delimiter)
            coeffValue = float(tokens[1])
            # the first token corresponds to the dimension. Break it on _ and see if the first value exists on colNames
            # if not, something is wrong. Discard it
            dimTokens = tokens[0].split('_')
            dimName = dimTokens[0]
            if dimName not in retMap and dimName != 'intercept':
                continue
            if dimName == 'intercept':
                retMap[dimName] = coeffValue
            else:
                dimValue = int(dimTokens[1])
                retMap[dimName][dimValue] = coeffValue

        self.feedMap = retMap

    def getCTRForDimensions(self, dimList, dimValues, othersId):
        """
        Takes the dimension list and dimension values and returns the CTR predicted for the same.

        :param dimList: Names of the dimensions
        :type dimList: list of str
        :param dimValues: values of each dimension
        :type dimValues: list of int
        :param othersId: id of the 'others' value, in case dim values is not present (default)
        :type othersId: int
        :returns: CTR predicted for the given dimensions
        :rtype: float
        """
        if self.feedMap is None:
            return None

        # get the sum of the coefficients corresponding to the dimensions.
        coefficientSum = 0.0
        if 'intercept' in self.feedMap:
            coefficientSum += self.feedMap['intercept']
        dimListLen = len(dimList)
        for i in range(0, dimListLen):
            dimName = dimList[i]
            dimValue = dimValues[i]
            if dimName not in self.feedMap:
                # The dimension is not part of the ctr prediction. no need to do anything
                continue
            if dimValue in self.feedMap[dimName]:
                coefficientSum += self.feedMap[dimName][dimValue]
            elif othersId in self.feedMap[dimName]:
                coefficientSum += self.feedMap[dimName][othersId]
            else:
                pass

        ctrValue = 1.0 / (1 + math.exp(-coefficientSum))
        return ctrValue

if __name__ == '__main__':
    # Test the function
    ctrFeedFileName = sys.argv[1]
    ctrData = ""

    with open(ctrFeedFileName, 'r') as ctrFeedFile:
        ctrData = ctrFeedFile.read()
    ctrData = ctrData.strip()

    ctrPredictor = LogitCTRPredictor()
    colNames = ['country', 'carrier', 'os', 'campaignid', 'time']
    ctrPredictor.loadCTRFeedFromString(ctrData, colNames, '', 0)

    country = int(sys.argv[2])
    carrier = int(sys.argv[3])
    os = int(sys.argv[4])
    campaignid = int(sys.argv[5])
    time = int(sys.argv[6])
    colVals = [country, carrier, os, campaignid, time]

    predictedCTR = ctrPredictor.getCTRForDimensions(colNames, colVals, -2)
    print predictedCTR
    #predictedCTR = ctrPredictor.getCTRForDimensions(['adid', 'campaignid', 'carrier', 'os', 'time'], [202699, 22213, 223, 6, 7], 997)
    #print predictedCTR
    #predictedCTR = ctrPredictor.getCTRForDimensions(['adid', 'campaignid', 'carrier', 'os', 'time'], [202699, 23576, 223, 1, 7], 997)
    #print predictedCTR
